// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package models

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    created_at, updated_at, first_name, last_name, email, picture_url
) VALUES (
    now(), now(), $1, $2, $3, $4
)
RETURNING id, created_at, updated_at, deleted_at, first_name, last_name, email, picture_url
`

type CreateUserParams struct {
	FirstName  string
	LastName   string
	Email      string
	PictureUrl string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PictureUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PictureUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, deleted_at, first_name, last_name, email, picture_url FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PictureUrl,
	)
	return i, err
}
